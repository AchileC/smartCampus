{% extends 'base.html.twig' %}

{% block title %}{{ 'analytics.title'|trans }} - {{ room.name }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Container for each chart */
        .chart-container {
            position: relative;
            height: 400px;
            width: 100%;
            margin-bottom: 2rem;
        }

        /* Selector for time range buttons */
        .time-range-selector {
            margin-bottom: 1rem;
        }

        /* Message displayed when no data is available */
        .no-data-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #6c757d;
        }

        /* Title styling for each chart */
        .chart-title {
            font-size: 1.2rem;
            font-weight: 500;
            margin-bottom: 1rem;
            color: #495057;
        }

        /* Text styling within charts */
        .chart-text {
            color: #6c757d;
        }

        /* Additional styles can be added here */
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid">
        <!-- Header Section -->
        <div class="row">
            <div class="col-md-10 offset-md-1 bg-info py-5 position-relative">
                <h1 class="text-center text-white mb-0">{{ 'analytics.summary'|trans }} {{ room.name }}</h1>
            </div>
        </div>

        <!-- Main Analytics Card -->
        <div class="card w-75 mx-auto mt-4 shadow-lg">
            <div class="card-body">
                <!-- Time Range Selection Buttons -->
                <div class="time-range-selector text-center mb-4">
                    <div class="btn-group" role="group" aria-label="Time range selector">
                        <button type="button" class="btn btn-outline-primary active" data-range="month">{{ 'analytics.last_30_days'|trans }}</button>
                        <button type="button" class="btn btn-outline-primary" data-range="week">{{ 'analytics.last_7_days'|trans }}</button>

                    </div>
                </div>

                <!-- Temperature Evolution Chart -->
                <div class="chart-container">
                    <h3 class="chart-title">{{ 'analytics.temperature_evolution'|trans }}</h3>
                    <canvas id="temperatureChart"></canvas>
                    <div id="temperatureNoData" class="no-data-message d-none">
                        <i class="bi bi-exclamation-circle fs-1"></i>
                        <p>{{ 'analytics.no_temperature_data'|trans }}</p>
                    </div>
                </div>

                <!-- Humidity Evolution Chart -->
                <div class="chart-container">
                    <h3 class="chart-title">{{ 'analytics.humidity_evolution'|trans }}</h3>
                    <canvas id="humidityChart"></canvas>
                    <div id="humidityNoData" class="no-data-message d-none">
                        <i class="bi bi-exclamation-circle fs-1"></i>
                        <p>{{ 'analytics.no_humidity_data'|trans }}</p>
                    </div>
                </div>

                <!-- CO2 Concentration Evolution Chart -->
                <div class="chart-container">
                    <h3 class="chart-title">{{ 'analytics.co2_concentration_evolution'|trans }}</h3>
                    <canvas id="co2Chart"></canvas>
                    <div id="co2NoData" class="no-data-message d-none">
                        <i class="bi bi-exclamation-circle fs-1"></i>
                        <p>{{ 'analytics.no_co2_data'|trans }}</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Back to Room Details Button -->
        <div class="card w-75 mx-auto mt-4 text-center">
            <div class="card-body">
                <a href="{{ path('app_rooms_details', { name: room.name}) }}" class="btn btn-outline-secondary">{{ 'back_to_room_details'|trans }}</a>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <!-- Chart.js Library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Date Adapter for Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <!-- Zoom Plugin for Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.0/dist/chartjs-plugin-zoom.min.js"></script>
    <script>
        // Parse historical data passed from the backend
        const historicalData = {{ historicalData|json_encode|raw }};
        console.log('Historical Data:', historicalData);

        /**
 * Transforms raw data into a format suitable for Chart.js by finding the closest data point to each target hour.
 * @param {Object} data - Contains keys for temperature, humidity, and CO2
 * @param {String} key - The specific data key ("temp", "hum", or "co2")
 * @param {String} range - Time range ("month" or "week")
 * @returns {Array} Array of data points with x (Date) and y (Number)
 */
function transformData(data, key, range) {
    if (!data || !data[key]) {
        return [];
    }

    // Define specific hours based on the selected time range
    const specificHours = range === 'month' ? [0, 4, 8, 12, 16, 20] : Array.from({ length: 24 }, (_, i) => i);
    const daysToSubtract = range === 'month' ? 30 : 7;

    // Define tolerance in milliseconds (e.g., 30 minutes)
    const tolerance = 30 * 60 * 1000;

    // Calculate the start and end dates
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(endDate.getDate() - daysToSubtract);

    // Sort data points by dateCapture for efficient searching
    const sortedData = data[key].map(item => ({
        date: new Date(item.dateCapture),
        value: parseFloat(item.valeur)
    })).filter(item => item.date >= startDate && item.date <= endDate)
      .sort((a, b) => a.date - b.date);

    // Initialize result array
    const result = [];

    // Iterate over each day in the range
    for (let day = new Date(startDate); day <= endDate; day.setDate(day.getDate() + 1)) {
        specificHours.forEach(hour => {
            const targetDate = new Date(day);
            targetDate.setHours(hour, 0, 0, 0);

            // Find the closest data point within the tolerance
            let closest = null;
            let minDiff = tolerance;

            // Binary search could be implemented here for efficiency
            for (let i = 0; i < sortedData.length; i++) {
                const current = sortedData[i];
                const diff = Math.abs(current.date - targetDate);
                if (diff <= minDiff) {
                    minDiff = diff;
                    closest = current.value;
                } else if (current.date > targetDate && diff > minDiff) {
                    // Since data is sorted, no need to check further
                    break;
                }
            }

            // Push the closest value or null if no data within tolerance
            result.push({ x: new Date(targetDate), y: closest !== null ? closest : null });
        });
    }

    // Sort the data points chronologically
    result.sort((a, b) => new Date(a.x) - new Date(b.x));

    return result;
}


        /**
         * Calculates the average of valid y-values in the dataset
         * @param {Array} data - Array of data points with y-values
         * @returns {Number|null} The average value or null if no valid data
         */
        function calculateAverage(data) {
            const validData = data.filter(point => point.y !== null && !isNaN(point.y));
            if (validData.length === 0) return null;
            const sum = validData.reduce((acc, point) => acc + point.y, 0);
            return (sum / validData.length).toFixed(2);
        }

        /**
         * Initializes or updates a Chart.js chart
         * @param {String} chartId - The ID of the canvas element
         * @param {String} label - The label for the dataset
         * @param {Array} data - Array of data points
         * @param {String} yAxisLabel - Label for the Y-axis
         * @param {String} color - Color for the chart line
         * @param {Number} min - Minimum value for the Y-axis
         * @param {Number} max - Maximum value for the Y-axis
         * @param {String} range - Time range ("month" or "week")
         */
        function updateChart(chartId, label, data, yAxisLabel, color, min, max, range) {
            const ctx = document.getElementById(chartId);
            const noDataDiv = document.getElementById(chartId.replace('Chart', 'NoData'));

            // Destroy existing chart instance if present
            if (ctx.chart) {
                ctx.chart.destroy();
            }

            // Handle cases with no data
            if (!data || data.length === 0) {
                ctx.style.display = 'none';
                noDataDiv.classList.remove('d-none');
                return;
            }

            // Display chart and hide "No data" message
            ctx.style.display = 'block';
            noDataDiv.classList.add('d-none');

            // Calculate average value for the dataset
            const average = calculateAverage(data);

            // Define the date range for the X-axis
            const endDate = new Date();
            const daysToSubtract = range === 'month' ? 30 : 7;
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - daysToSubtract);

            // Initialize the Chart.js instance
            ctx.chart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [
                        {
                            label: label,
                            data: data,
                            borderColor: color,
                            backgroundColor: color.replace(')', ', 0.1)').replace('rgb', 'rgba'),
                            borderWidth: 2,
                            tension: 0.2,
                            fill: true,
                            pointRadius: 0,
                            spanGaps: false
                        },
                        {
                            label: 'Average',
                            data: average !== null ? data.map(point => ({ x: point.x, y: average })) : [],
                            borderColor: 'rgba(255, 182, 193, 1)', // Light pink color for average line
                            borderWidth: 1.5,
                            borderDash: [5, 5],
                            pointRadius: 0,
                            fill: false,
                            spanGaps: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                color: '#6c757d'
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false
                        },
                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'x',
                                modifierKey: null
                            },
                            zoom: {
                                wheel: {
                                    enabled: true
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'x',
                            },
                            limits: {
                                x: {
                                    min: startDate,
                                    max: endDate
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: {
                                    day: 'MMM d'
                                }
                            },
                            min: startDate,
                            max: endDate,
                            title: {
                                display: true,
                                text: 'Date',
                                color: '#6c757d'
                            },
                            ticks: {
                                color: '#6c757d'
                            }
                        },
                        y: {
                            min: min,
                            max: max,
                            title: {
                                display: true,
                                text: yAxisLabel,
                                color: '#6c757d'
                            },
                            ticks: {
                                color: '#6c757d'
                            }
                        }
                    },
                    interaction: {
                        intersect: false,
                        mode: 'index',
                    },
                    maintainAspectRatio: false
                }
            });
        }

        /**
         * Updates all charts based on the selected time range
         * @param {Object} data - Historical data for all metrics
         * @param {String} range - Selected time range ("month" or "week")
         */
        function updateAllCharts(data, range) {
            // Transform data for each metric
            const tempData = transformData(data, 'temp', range);
            const humData  = transformData(data, 'hum', range);
            const co2Data  = transformData(data, 'co2', range);

            // Update Temperature Chart
            updateChart(
                'temperatureChart',
                'Temperature',
                tempData,
                'Temperature (°C)',
                'rgb(255, 99, 132)',
                10,
                30,
                range
            );

            // Update Humidity Chart
            updateChart(
                'humidityChart',
                'Humidity',
                humData,
                'Humidity (%)',
                'rgb(54, 162, 235)',
                0,
                100,
                range
            );

            // Update CO2 Concentration Chart
            updateChart(
                'co2Chart',
                'CO₂ Concentration',
                co2Data,
                'CO₂ Concentration (ppm)',
                'rgb(75, 192, 192)',
                0,
                2000,
                range
            );
        }

        // Initialize charts and event listeners once the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            const timeRangeButtons = document.querySelectorAll('.time-range-selector button');

            // Add click event listeners to time range buttons
            timeRangeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Remove 'active' class from all buttons and add to the clicked button
                    timeRangeButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');

                    // Update charts based on the selected range
                    updateAllCharts(historicalData, this.dataset.range);
                });
            });

            // Default view: Last 30 Days
            updateAllCharts(historicalData, 'month');
        });
    </script>
{% endblock %}
