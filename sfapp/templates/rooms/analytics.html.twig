{% extends 'base.html.twig' %}

{% block title %}Analytics - {{ room.name }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .chart-container {
            position: relative;
            height: 400px;
            width: 100%;
            margin-bottom: 2rem;
        }
        .time-range-selector {
            margin-bottom: 1rem;
        }
        .no-data-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #6c757d;
        }
        .chart-title {
            font-size: 1.2rem;
            font-weight: 500;
            margin-bottom: 1rem;
            color: #495057;
        }
        .chart-text {
            color: #6c757d;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-10 offset-md-1 bg-info py-5 position-relative">
                <h1 class="text-center text-white mb-0">Analytics for Room {{ room.name }}</h1>
            </div>
        </div>

        <div class="card w-75 mx-auto mt-4 shadow-lg">
            <div class="card-body">
                <div class="time-range-selector text-center mb-4">
                    <div class="btn-group" role="group" aria-label="Time range selector">
                        <button type="button" class="btn btn-outline-primary active" data-range="month">Last 30 Days</button>
                        <button type="button" class="btn btn-outline-primary" data-range="week">Last 7 Days</button>
                    </div>
                </div>

                <!-- Temperature Chart -->
                <div class="chart-container">
                    <h3 class="chart-title">Temperature Evolution</h3>
                    <canvas id="temperatureChart"></canvas>
                    <div id="temperatureNoData" class="no-data-message d-none">
                        <i class="bi bi-exclamation-circle fs-1"></i>
                        <p>No temperature data available for this period</p>
                    </div>
                </div>

                <!-- Humidity Chart -->
                <div class="chart-container">
                    <h3 class="chart-title">Humidity Evolution</h3>
                    <canvas id="humidityChart"></canvas>
                    <div id="humidityNoData" class="no-data-message d-none">
                        <i class="bi bi-exclamation-circle fs-1"></i>
                        <p>No humidity data available for this period</p>
                    </div>
                </div>

                <!-- CO2 Chart -->
                <div class="chart-container">
                    <h3 class="chart-title">CO₂ Concentration Evolution</h3>
                    <canvas id="co2Chart"></canvas>
                    <div id="co2NoData" class="no-data-message d-none">
                        <i class="bi bi-exclamation-circle fs-1"></i>
                        <p>No CO2 data available for this period</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Back Button -->
        <div class="card w-75 mx-auto mt-4 text-center">
            <div class="card-body">
                <a href="{{ path('app_rooms_details', { name: room.name }) }}" class="btn btn-outline-secondary">Back to Room Details</a>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script>
        const historicalData = {{ historicalData|json_encode|raw }};
        console.log('Historical Data:', historicalData);

        function transformData(data, key, range) {
            if (!data || !data[key]) {
                return [];
            }

            const specificHours = range === 'month' ? [0, 4, 8, 12, 16, 20] : Array.from({ length: 24 }, (_, i) => i);
            const daysToSubtract = range === 'month' ? 30 : 7;

            const startDate = new Date();
            startDate.setDate(startDate.getDate() - daysToSubtract);
            const endDate = new Date();

            const dataMap = new Map();
            data[key].forEach(item => {
                const currentDate = new Date(item.dateCapture);
                const hour = currentDate.getHours();
                if (specificHours.includes(hour) && currentDate >= startDate && currentDate <= endDate) {
                    const key = currentDate.toISOString();
                    dataMap.set(key, parseFloat(item.valeur));
                }
            });

            const result = [];
            const current = new Date(startDate);
            while (current <= endDate) {
                specificHours.forEach(hour => {
                    const date = new Date(current);
                    date.setHours(hour, 0, 0, 0);
                    const isoString = date.toISOString();
                    if (date >= startDate && date <= endDate) {
                        if (dataMap.has(isoString)) {
                            result.push({ x: date, y: dataMap.get(isoString) });
                        } else {
                            result.push({ x: date, y: null });
                        }
                    }
                });
                current.setDate(current.getDate() + 1);
            }

            result.sort((a, b) => new Date(a.x) - new Date(b.x));

            return result;
        }

        function updateChart(chartId, label, data, yAxisLabel, color, min, max, range) {
            const ctx = document.getElementById(chartId);
            const noDataDiv = document.getElementById(chartId.replace('Chart', 'NoData'));

            if (ctx.chart) {
                ctx.chart.destroy();
            }

            if (!data || data.length === 0) {
                ctx.style.display = 'none';
                noDataDiv.classList.remove('d-none');
                return;
            }

            ctx.style.display = 'block';
            noDataDiv.classList.add('d-none');

            const endDate = new Date();
            const daysToSubtract = range === 'month' ? 30 : 7;
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - daysToSubtract);

            ctx.chart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [
                        {
                            label: label,
                            data: data,
                            borderColor: color,
                            backgroundColor: color.replace(')', ', 0.1)').replace('rgb', 'rgba'),
                            borderWidth: 2,
                            tension: 0.2,
                            fill: true,
                            pointRadius: 0,
                            pointHoverRadius: 1,
                            spanGaps: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                color: '#6c757d'
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false
                        }
                    },
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: {
                                    day: 'MMM d'
                                }
                            },
                            min: startDate,
                            max: endDate,
                            title: {
                                display: true,
                                text: 'Date',
                                color: '#6c757d'
                            },
                            ticks: {
                                color: '#6c757d'
                            }
                        },
                        y: {
                            min: min,
                            max: max,
                            title: {
                                display: true,
                                text: yAxisLabel,
                                color: '#6c757d'
                            },
                            ticks: {
                                color: '#6c757d'
                            }
                        }
                    }
                }
            });
        }

        function updateAllCharts(data, range) {
            const tempData = transformData(data, 'temp', range);
            const humData  = transformData(data, 'hum', range);
            const co2Data  = transformData(data, 'co2', range);

            updateChart(
                'temperatureChart',
                'Temperature',
                tempData,
                'Temperature (°C)',
                'rgb(255, 99, 132)',
                10,
                30,
                range
            );

            updateChart(
                'humidityChart',
                'Humidity',
                humData,
                'Humidity (%)',
                'rgb(54, 162, 235)',
                0,
                100,
                range
            );

            updateChart(
                'co2Chart',
                'CO₂ Concentration',
                co2Data,
                'CO₂ Concentration (ppm)',
                'rgb(75, 192, 192)',
                0,
                2000,
                range
            );
        }

        document.addEventListener('DOMContentLoaded', function() {
            const timeRangeButtons = document.querySelectorAll('.time-range-selector button');

            timeRangeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    timeRangeButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    updateAllCharts(historicalData, this.dataset.range);
                });
            });

            // Default display: "Last 30 Days"
            updateAllCharts(historicalData, 'month');
        });
    </script>
{% endblock %}
