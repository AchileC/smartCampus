{% extends 'base.html.twig' %}

{% block title %}Analytics - {{ room.name }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .chart-container {
            position: relative;
            height: 400px;
            width: 100%;
            margin-bottom: 2rem;
        }
        .time-range-selector {
            margin-bottom: 1rem;
        }
        .no-data-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #6c757d;
        }
        .chart-title {
            font-size: 1.2rem;
            font-weight: 500;
            margin-bottom: 1rem;
            color: #495057;
        }
        .chart-text {
            color: #6c757d;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-10 offset-md-1 bg-info py-5 position-relative">
                <h1 class="text-center text-white mb-0">Analytics for Room {{ room.name }}</h1>
            </div>
        </div>

        <div class="card w-75 mx-auto mt-4 shadow-lg">
            <div class="card-body">
                <div class="time-range-selector text-center mb-4">
                    <div class="btn-group" role="group" aria-label="Time range selector">
                        <button type="button" class="btn btn-outline-primary" data-range="year">Last Year</button>
                        <button type="button" class="btn btn-outline-primary active" data-range="month">Last 30 Days</button>
                        <button type="button" class="btn btn-outline-primary" data-range="week">Last 7 Days</button>
                    </div>
                </div>

                <!-- Temperature Chart -->
                <div class="chart-container">
                    <h3 class="chart-title">Temperature Evolution</h3>
                    <canvas id="temperatureChart"></canvas>
                    <div id="temperatureNoData" class="no-data-message d-none">
                        <i class="bi bi-exclamation-circle fs-1"></i>
                        <p>No temperature data available for this period</p>
                    </div>
                </div>

                <!-- Humidity Chart -->
                <div class="chart-container">
                    <h3 class="chart-title">Humidity Evolution</h3>
                    <canvas id="humidityChart"></canvas>
                    <div id="humidityNoData" class="no-data-message d-none">
                        <i class="bi bi-exclamation-circle fs-1"></i>
                        <p>No humidity data available for this period</p>
                    </div>
                </div>

                <!-- CO2 Chart -->
                <div class="chart-container">
                    <h3 class="chart-title">CO₂ Concentration Evolution</h3>
                    <canvas id="co2Chart"></canvas>
                    <div id="co2NoData" class="no-data-message d-none">
                        <i class="bi bi-exclamation-circle fs-1"></i>
                        <p>No CO2 data available for this period</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Back Button -->
        <div class="card w-75 mx-auto mt-4 text-center">
            <div class="card-body">
                <a href="{{ path('app_rooms_details', { name: room.name }) }}" class="btn btn-outline-secondary">Back to Room Details</a>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script>
        const historicalData = {{ historicalData|json_encode|raw }};
        console.log('Historical Data:', historicalData);

        // Function to format dates
        function formatDate(date) {
            const d = new Date(date);
            const options = { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };
            return d.toLocaleDateString(undefined, options);
        }

        // Function to transform data for Chart.js
        function transformData(data, key) {
            if (!data || !data[key]) {
                return [];
            }

            return data[key].map(item => ({
                x: item.dateCapture, // Use `dateCapture` for x-axis
                y: parseFloat(item.valeur) // Use `valeur` for y-axis
            }));
        }

        // Function to create or update a chart
        function updateChart(chartId, label, data, yAxisLabel, color) {
            const ctx = document.getElementById(chartId);
            const noDataDiv = document.getElementById(chartId.replace('Chart', 'NoData'));

            // Destroy existing chart instance if it exists
            if (ctx.chart) {
                ctx.chart.destroy();
            }

            if (!data || data.length === 0) {
                ctx.style.display = 'none';
                noDataDiv.classList.remove('d-none');
                return;
            }

            ctx.style.display = 'block';
            noDataDiv.classList.add('d-none');

            ctx.chart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: label,
                        data: data, // Provide the transformed data
                        borderColor: color,
                        backgroundColor: color.replace(')', ', 0.1)').replace('rgb', 'rgba'),
                        borderWidth: 2,
                        tension: 0.2,
                        fill: true,
                        pointBackgroundColor: color,
                        pointRadius: 3,
                        pointHoverRadius: 5,
                        spanGaps: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                color: '#6c757d'
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    const value = context.raw.y;
                                    if (label === 'Temperature') {
                                        return `${label}: ${value}°C`;
                                    } else if (label === 'Humidity') {
                                        return `${label}: ${value}%`;
                                    } else {
                                        return `${label}: ${value} ppm`;
                                    }
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            type: 'time',
                            title: {
                                display: true,
                                text: 'Date',
                                font: {
                                    weight: 'bold'
                                },
                                color: '#6c757d'
                            },
                            time: {
                                tooltipFormat: 'yyyy-MM-dd HH:mm',
                                unit: 'minute',
                                displayFormats: {
                                    minute: 'HH:mm',
                                    hour: 'MMM d, HH:mm',
                                    day: 'MMM d',
                                    month: 'MMM yyyy'
                                }
                            },
                            ticks: {
                                color: '#6c757d'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: yAxisLabel,
                                font: {
                                    weight: 'bold'
                                },
                                color: '#6c757d'
                            },
                            ticks: {
                                color: '#6c757d'
                            }
                        }
                    }
                }
            });
        }

        // Update all charts
        function updateAllCharts(data) {
            updateChart(
                'temperatureChart',
                'Temperature',
                transformData(data, 'temp'),
                'Temperature (°C)',
                'rgb(255, 99, 132)'
            );

            updateChart(
                'humidityChart',
                'Humidity',
                transformData(data, 'hum'),
                'Humidity (%)',
                'rgb(54, 162, 235)'
            );

            updateChart(
                'co2Chart',
                'CO₂ Concentration',
                transformData(data, 'co2'),
                'CO₂ Concentration (ppm)',
                'rgb(75, 192, 192)'
            );
        }

        // Initialize charts
        document.addEventListener('DOMContentLoaded', function() {
            updateAllCharts(historicalData);
        });
    </script>

{% endblock %} 