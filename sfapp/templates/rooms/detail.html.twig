{% extends 'base.html.twig' %}
{# rooms/detail.html.twig #}
{% block title %}Room Details - {{ room.name }}{% endblock %}

{% block body %}
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-10 offset-md-1 {% if room.state.value == 'none' %}bg-secondary{%elseif room.state.value == 'waiting' %}bg-primary{% elseif room.state.value == 'stable' %}bg-success{% elseif room.state.value == 'at risk' %}bg-warning{% else %}bg-danger{% endif %} py-5 position-relative">
                <h1 class="text-center text-white mb-0">Room {{ room.name }}</h1>
            </div>
        </div>

        <!-- Room Information Card -->
        <div class="card w-75 mx-auto mt-4 shadow-lg">
            <div class="card-body">
                <h5 class="card-title">Room Constants</h5>
                <p class="card-text"><strong>Ambient Room State </strong>
                    <span class="badge-custom-size {% if room.state.value == 'none' %}bg-secondary{%elseif room.state.value == 'waiting' %}bg-primary{% elseif room.state.value == 'stable' %}bg-success{% elseif room.state.value == 'at risk' %}bg-warning{% else %}bg-danger{% endif %}">
                    {{ room.state.value | upper }}
                </span>
                </p>

                {% if room.acquisitionSystem %}
                    <ul class="list-group">
                        <!-- Temperature -->
                        {% set temp = room.acquisitionSystem.temperature %}
                        {% set isHeatingPeriod = "now"|date("m") in ["11", "12", "01", "02", "03", "04"] %}
                        {% set tempAberrant = thresholds.isTemperatureAberrant(temp) %}
                        {% if not tempAberrant %}
                            {% if isHeatingPeriod %}
                                {% set tempCritical = temp < thresholds.heatingTempCriticalMin or temp > thresholds.heatingTempCriticalMax %}
                                {% set tempWarning = not tempCritical and (temp < thresholds.heatingTempWarningMin or temp > thresholds.heatingTempWarningMax) %}
                            {% else %}
                                {% set tempCritical = temp < thresholds.nonHeatingTempCriticalMin or temp > thresholds.nonHeatingTempCriticalMax %}
                                {% set tempWarning = not tempCritical and (temp < thresholds.nonHeatingTempWarningMin or temp > thresholds.nonHeatingTempWarningMax) %}
                            {% endif %}
                        {% else %}
                            {% set tempCritical = true %}
                            {% set tempWarning = false %}
                        {% endif %}
                        {% set tempClass = tempCritical ? 'list-group-item-danger' : (tempWarning ? 'list-group-item-warning' : 'list-group-item-success') %}
                        <li class="list-group-item {{ tempClass }} p-3">
                            <div class="row">
                                <div class="col-md-6">
                                    {{ tempCritical ? 'üö®' : (tempWarning ? '‚ö†Ô∏è' : '‚úÖ') }} 
                                    <strong>Temperature:</strong>
                                    {{ temp is not null ? temp ~ '¬∞C' : 'No value measured' }}
                                    {% if temp is not null %}
                                        <div class="mt-2 small {% if tempCritical %}text-danger{% elseif tempWarning %}text-warning{% else %}text-success{% endif %}">
                                            {% if tempAberrant %}
                                                Temperature sensor is broken or malfunctioning. Please contact maintenance.
                                            {% elseif tempCritical %}
                                                Critical error: Verify sensor functionality.
                                            {% elseif tempWarning %}
                                                {% if isHeatingPeriod %}
                                                    {% if temp < thresholds.heatingTempWarningMin %}
                                                        Check heating system and adjust to reach {{ thresholds.heatingTempWarningMin }}¬∞C.
                                                    {% elseif temp > thresholds.heatingTempWarningMax %}
                                                        Reduce heating to avoid overconsumption.
                                                    {% endif %}
                                                {% else %}
                                                    {% if temp < thresholds.nonHeatingTempWarningMin %}
                                                        Adjust AC to reach {{ thresholds.nonHeatingTempWarningMin }}¬∞C if present.
                                                    {% elseif temp > thresholds.nonHeatingTempWarningMax %}
                                                        Activate AC/fans (max {{ thresholds.nonHeatingTempWarningMax }}¬∞C) and ventilate.
                                                    {% endif %}
                                                {% endif %}
                                            {% else %}
                                                Optimal temperature maintained.
                                            {% endif %}
                                        </div>
                                    {% endif %}
                                </div>
                                <div class="col-md-6">
                                    {% set minTemp = 10 %}
                                    {% set maxTemp = 35 %}
                                    {% set currentTempPercentage = max(0, min(100, ((temp - minTemp) / (maxTemp - minTemp) * 100)|round)) %}
                                    <div class="position-relative">
                                        <div class="progress" style="height: 15px;">
                                            {% if isHeatingPeriod %}
                                                {% set criticalMinWidth = ((thresholds.heatingTempCriticalMin - minTemp) / (maxTemp - minTemp) * 100)|round %}
                                                {% set warningMinWidth = ((thresholds.heatingTempWarningMin - thresholds.heatingTempCriticalMin) / (maxTemp - minTemp) * 100)|round %}
                                                {% set optimalWidth = ((thresholds.heatingTempWarningMax - thresholds.heatingTempWarningMin) / (maxTemp - minTemp) * 100)|round %}
                                                {% set warningMaxWidth = ((thresholds.heatingTempCriticalMax - thresholds.heatingTempWarningMax) / (maxTemp - minTemp) * 100)|round %}
                                                {% set criticalMaxWidth = ((maxTemp - thresholds.heatingTempCriticalMax) / (maxTemp - minTemp) * 100)|round %}

                                                <div class="progress-bar bg-danger" role="progressbar" style="width: {{ criticalMinWidth }}%" data-bs-toggle="tooltip" title="Critical (< {{ thresholds.heatingTempCriticalMin }}¬∞C)"></div>
                                                <div class="progress-bar bg-warning" role="progressbar" style="width: {{ warningMinWidth }}%" data-bs-toggle="tooltip" title="Warning ({{ thresholds.heatingTempCriticalMin }}-{{ thresholds.heatingTempWarningMin }}¬∞C)"></div>
                                                <div class="progress-bar bg-success" role="progressbar" style="width: {{ optimalWidth }}%" data-bs-toggle="tooltip" title="Optimal ({{ thresholds.heatingTempWarningMin }}-{{ thresholds.heatingTempWarningMax }}¬∞C)"></div>
                                                <div class="progress-bar bg-warning" role="progressbar" style="width: {{ warningMaxWidth }}%" data-bs-toggle="tooltip" title="Warning ({{ thresholds.heatingTempWarningMax }}-{{ thresholds.heatingTempCriticalMax }}¬∞C)"></div>
                                                <div class="progress-bar bg-danger" role="progressbar" style="width: {{ criticalMaxWidth }}%" data-bs-toggle="tooltip" title="Critical (> {{ thresholds.heatingTempCriticalMax }}¬∞C)"></div>
                                            {% else %}
                                                {% set criticalMinWidth = ((thresholds.nonHeatingTempCriticalMin - minTemp) / (maxTemp - minTemp) * 100)|round %}
                                                {% set warningMinWidth = ((thresholds.nonHeatingTempWarningMin - thresholds.nonHeatingTempCriticalMin) / (maxTemp - minTemp) * 100)|round %}
                                                {% set optimalWidth = ((thresholds.nonHeatingTempWarningMax - thresholds.nonHeatingTempWarningMin) / (maxTemp - minTemp) * 100)|round %}
                                                {% set warningMaxWidth = ((thresholds.nonHeatingTempCriticalMax - thresholds.nonHeatingTempWarningMax) / (maxTemp - minTemp) * 100)|round %}
                                                {% set criticalMaxWidth = ((maxTemp - thresholds.nonHeatingTempCriticalMax) / (maxTemp - minTemp) * 100)|round %}

                                                <div class="progress-bar bg-danger" role="progressbar" style="width: {{ criticalMinWidth }}%" data-bs-toggle="tooltip" title="Critical (< {{ thresholds.nonHeatingTempCriticalMin }}¬∞C)"></div>
                                                <div class="progress-bar bg-warning" role="progressbar" style="width: {{ warningMinWidth }}%" data-bs-toggle="tooltip" title="Warning ({{ thresholds.nonHeatingTempCriticalMin }}-{{ thresholds.nonHeatingTempWarningMin }}¬∞C)"></div>
                                                <div class="progress-bar bg-success" role="progressbar" style="width: {{ optimalWidth }}%" data-bs-toggle="tooltip" title="Optimal ({{ thresholds.nonHeatingTempWarningMin }}-{{ thresholds.nonHeatingTempWarningMax }}¬∞C)"></div>
                                                <div class="progress-bar bg-warning" role="progressbar" style="width: {{ warningMaxWidth }}%" data-bs-toggle="tooltip" title="Warning ({{ thresholds.nonHeatingTempWarningMax }}-{{ thresholds.nonHeatingTempCriticalMax }}¬∞C)"></div>
                                                <div class="progress-bar bg-danger" role="progressbar" style="width: {{ criticalMaxWidth }}%" data-bs-toggle="tooltip" title="Critical (> {{ thresholds.nonHeatingTempCriticalMax }}¬∞C)"></div>
                                            {% endif %}
                                        </div>
                                        {% if temp %}
                                            <div class="position-absolute" style="left: calc({{ currentTempPercentage }}% - 10px); top: 15px;">
                                                <div style="width: 0; height: 0; border-left: 8px solid transparent; border-right: 8px solid transparent; border-bottom: 12px solid {% if tempCritical %}var(--bs-danger){% elseif tempWarning %}var(--bs-warning){% else %}var(--bs-success){% endif %};"></div>
                                                <span class="badge rounded-pill {% if tempCritical %}bg-danger{% elseif tempWarning %}bg-warning{% else %}bg-success{% endif %}" style="transform: translateX(-50%);">{{ temp }}¬∞C</span>
                                            </div>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        </li>

                        <!-- Humidity -->
                        {% set hum = room.acquisitionSystem.humidity %}
                        {% set humAberrant = thresholds.isHumidityAberrant(hum) %}
                        {% if not humAberrant %}
                            {% set humWarning = (hum > thresholds.humWarningMax and hum <= thresholds.humCriticalMax) or (hum < thresholds.humWarningMin and hum >= thresholds.humCriticalMin) %}
                            {% set humCritical = hum > thresholds.humCriticalMax or hum < thresholds.humCriticalMin %}
                        {% else %}
                            {% set humCritical = true %}
                            {% set humWarning = false %}
                        {% endif %}
                        {% set humClass = humCritical ? 'list-group-item-danger' : (humWarning ? 'list-group-item-warning' : 'list-group-item-success') %}
                        <li class="list-group-item {{ humClass }} p-3">
                            <div class="row">
                                <div class="col-md-6">
                                    {% if humCritical %}
                                        üö®
                                    {% elseif humWarning %}
                                        ‚ö†Ô∏è
                                    {% else %}
                                        ‚úÖ
                                    {% endif %}
                                    <strong>Humidity:</strong>
                                    {{ hum is not null ? hum ~ '%' : 'No value measured' }}
                                    {% if hum is not null %}
                                        <div class="mt-2 small {% if humCritical %}text-danger{% elseif humWarning %}text-warning{% else %}text-success{% endif %}">
                                            {% if humAberrant %}
                                                Humidity sensor is broken or malfunctioning. Please contact maintenance.
                                            {% elseif humCritical %}
                                                Urgently ventilate; consider dehumidifier
                                            {% elseif humWarning %}
                                                Monitor and ventilate if needed
                                            {% else %}
                                                Optimal humidity level
                                            {% endif %}
                                        </div>
                                    {% endif %}
                                </div>
                                <div class="col-md-6">
                                    {% set currentHumPercentage = hum|default(0) %}
                                    <div class="position-relative">
                                        <div class="progress" style="height: 15px;">
                                            {% set criticalMinWidth = (thresholds.humCriticalMin)|round %}
                                            {% set warningMinWidth = (thresholds.humWarningMin - thresholds.humCriticalMin)|round %}
                                            {% set optimalWidth = (thresholds.humWarningMax - thresholds.humWarningMin)|round %}
                                            {% set warningMaxWidth = (thresholds.humCriticalMax - thresholds.humWarningMax)|round %}
                                            {% set criticalMaxWidth = (100 - thresholds.humCriticalMax)|round %}

                                            <div class="progress-bar bg-danger" role="progressbar" style="width: {{ criticalMinWidth }}%" data-bs-toggle="tooltip" title="Critical (< {{ thresholds.humCriticalMin }}%)"></div>
                                            <div class="progress-bar bg-warning" role="progressbar" style="width: {{ warningMinWidth }}%" data-bs-toggle="tooltip" title="Warning ({{ thresholds.humCriticalMin }}-{{ thresholds.humWarningMin }}%)"></div>
                                            <div class="progress-bar bg-success" role="progressbar" style="width: {{ optimalWidth }}%" data-bs-toggle="tooltip" title="Optimal ({{ thresholds.humWarningMin }}-{{ thresholds.humWarningMax }}%)"></div>
                                            <div class="progress-bar bg-warning" role="progressbar" style="width: {{ warningMaxWidth }}%" data-bs-toggle="tooltip" title="Warning ({{ thresholds.humWarningMax }}-{{ thresholds.humCriticalMax }}%)"></div>
                                            <div class="progress-bar bg-danger" role="progressbar" style="width: {{ criticalMaxWidth }}%" data-bs-toggle="tooltip" title="Critical (> {{ thresholds.humCriticalMax }}%)"></div>
                                        </div>
                                        {% if hum %}
                                            <div class="position-absolute" style="left: calc({{ currentHumPercentage }}% - 10px); top: 15px;">
                                                <div style="width: 0; height: 0; border-left: 8px solid transparent; border-right: 8px solid transparent; border-bottom: 12px solid {% if humCritical %}var(--bs-danger){% elseif humWarning %}var(--bs-warning){% else %}var(--bs-success){% endif %};"></div>
                                                <span class="badge rounded-pill {% if humCritical %}bg-danger{% elseif humWarning %}bg-warning{% else %}bg-success{% endif %}" style="transform: translateX(-50%);">{{ hum }}%</span>
                                            </div>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        </li>

                        <!-- CO‚ÇÇ -->
                        {% set co2 = room.acquisitionSystem.co2 %}
                        {% set co2Aberrant = thresholds.isCo2Aberrant(co2) %}
                        {% if not co2Aberrant %}
                            {% set co2Warning = co2 > thresholds.co2WarningMin and co2 <= thresholds.co2CriticalMax %}
                            {% set co2Critical = co2 > thresholds.co2CriticalMax and co2 <= thresholds.co2ErrorMax %}
                            {% set co2Error = co2 < thresholds.co2CriticalMin %}
                        {% else %}
                            {% set co2Warning = false %}
                            {% set co2Critical = false %}
                            {% set co2Error = true %}
                        {% endif %}
                        {% set co2Class = co2Error ? 'list-group-item-danger' : (co2Critical ? 'list-group-item-danger' : (co2Warning ? 'list-group-item-warning' : 'list-group-item-success')) %}
                        <li class="list-group-item {{ co2Class }} p-3">
                            <div class="row">
                                <div class="col-md-6">
                                    {% if co2Error %}
                                        üö®
                                    {% elseif co2Critical or co2Warning %}
                                        ‚ö†Ô∏è
                                    {% else %}
                                        ‚úÖ
                                    {% endif %}
                                    <strong>CO‚ÇÇ:</strong>
                                    {{ co2 is not null ? co2 ~ ' ppm' : 'No value measured' }}
                                    {% if co2 is not null %}
                                        <div class="mt-2 small {% if co2Error or co2Critical %}text-danger{% elseif co2Warning %}text-warning{% else %}text-success{% endif %}">
                                            {% if co2Aberrant %}
                                                CO‚ÇÇ sensor is broken or malfunctioning. Please contact maintenance.
                                            {% elseif co2Error %}
                                                Check sensor status
                                            {% elseif co2 > thresholds.co2CriticalMax and co2 <= thresholds.co2ErrorMax %}
                                                Ventilate immediately
                                            {% elseif co2 > thresholds.co2WarningMin %}
                                                Consider ventilation soon
                                            {% else %}
                                                Good air quality
                                            {% endif %}
                                        </div>
                                    {% endif %}
                                </div>
                                <div class="col-md-6">
                                    {% set currentCO2Percentage = (co2 / thresholds.co2ErrorMax * 100)|round %}
                                    <div class="position-relative">
                                        <div class="progress" style="height: 15px;">
                                            {% set criticalMinWidth = (400 / 2000 * 100)|round %}
                                            {% set optimalWidth = ((1000 - 400) / 2000 * 100)|round %}
                                            {% set warningWidth = ((1500 - 1000) / 2000 * 100)|round %}
                                            {% set criticalWidth = ((2000 - 1500) / 2000 * 100)|round %}

                                            <div class="progress-bar bg-danger" role="progressbar" style="width: {{ criticalMinWidth }}%" data-bs-toggle="tooltip" title="Critical (< 400 ppm)"></div>
                                            <div class="progress-bar bg-success" role="progressbar" style="width: {{ optimalWidth }}%" data-bs-toggle="tooltip" title="Optimal (400-1000 ppm)"></div>
                                            <div class="progress-bar bg-warning" role="progressbar" style="width: {{ warningWidth }}%" data-bs-toggle="tooltip" title="Warning (1000-1500 ppm)"></div>
                                            <div class="progress-bar bg-danger" role="progressbar" style="width: {{ criticalWidth }}%" data-bs-toggle="tooltip" title="Critical (1500-2000 ppm)"></div>
                                        </div>
                                        {% if co2 %}
                                            <div class="position-absolute" style="left: calc({{ currentCO2Percentage }}% - 10px); top: 15px;">
                                                <div style="width: 0; height: 0; border-left: 8px solid transparent; border-right: 8px solid transparent; border-bottom: 12px solid {% if co2Error or co2Critical %}var(--bs-danger){% elseif co2Warning %}var(--bs-warning){% else %}var(--bs-success){% endif %};"></div>
                                                <span class="badge rounded-pill {% if co2Error or co2Critical %}bg-danger{% elseif co2Warning %}bg-warning{% else %}bg-success{% endif %}" style="transform: translateX(-50%);">{{ co2 }} ppm</span>
                                            </div>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        </li>
                    </ul>
                {% else %}
                    <p class="text-muted">No acquisition system</p>
                {% endif %}
            </div>
        </div>

        {% if todayForecast is not null %}
            {# D√©finir le mapping des pictocodes #}
            {% set pictocodeMapping = {
                1: '‚òÄÔ∏è',
                2: 'üå§Ô∏è',
                3: '‚õÖ',
                4: '‚òÅÔ∏è',
                5: 'üå´Ô∏è',
                6: 'üåßÔ∏è',
                7: 'üå¶Ô∏è',
                8: '‚õàÔ∏è',
                9: 'üå®Ô∏è',
                10: 'üå•Ô∏è‚ùÑÔ∏è',
                11: 'üå®Ô∏èüåßÔ∏è',
                12: 'üå¶Ô∏è',
                13: 'üå®Ô∏è',
                14: 'üå¶Ô∏è',
                15: 'üå®Ô∏è',
                16: 'üå¶Ô∏è',
                17: 'üå®Ô∏è'
            } %}

            <div class="card w-75 mx-auto mt-4 shadow-lg">
                <div class="card-body">
                    <h5 class="card-title">Today's Weather Forecast</h5>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-thermometer-snow fs-3 me-3 text-info"></i>
                                <strong>Min Temperature : </strong>&nbsp;{{ todayForecast.temperature_min|round }}¬∞C
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-thermometer-sun fs-3 me-3 text-danger"></i>
                                <strong>Max Temperature : </strong>&nbsp;{{ todayForecast.temperature_max|round }}¬∞C
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-cloud-rain fs-3 me-3 text-secondary"></i>
                                <strong>Precipitation : </strong>&nbsp;{{ todayForecast.precipitation|round }} mm
                            </div>
                        </div>
                        <div class="col-md-4 text-center">
                            {# Afficher l'ic√¥ne bas√©e sur le pictocode #}
                            {% set pictocode = todayForecast.pictocode %}
                            {% set weatherIcon = pictocodeMapping[pictocode] ?? '‚ùì' %}
                            <span style="font-size: 5rem;">{{ weatherIcon }}</span>
                        </div>
                    </div>

                    {# G√©n√©rer des conseils d'action bas√©s sur la m√©t√©o #}
                    {% set advice = [] %}

                    {# Conseils bas√©s sur la temp√©rature max #}
                    {# Advice based on max temperature #}
                    {% if todayForecast.temperature_max >= 35 %}
                        {% set advice = advice|merge(['Extreme heat expected! Lower radiator settings and open windows or doors to ventilate the classroom. Monitor the temperature closely to ensure comfort.']) %}
                    {% elseif todayForecast.temperature_max >= 28 %}
                        {% set advice = advice|merge(['Very hot today. Consider lowering the radiator settings and ventilate the classroom by opening windows or doors to maintain a comfortable environment.']) %}
                    {% elseif todayForecast.temperature_max >= 22 %}
                        {% set advice = advice|merge(['Comfortable temperatures. Adjust radiator settings to maintain a pleasant classroom environment. Ventilate as needed to keep the air fresh.']) %}
                    {% elseif todayForecast.temperature_max <= 0 %}
                        {% set advice = advice|merge(['Freezing temperatures. Ensure radiators are set to a higher temperature to keep the classroom warm. Keep windows closed to conserve heat.']) %}
                    {% elseif todayForecast.temperature_max <= 15 %}
                        {% set advice = advice|merge(['Cold today. Increase radiator settings as necessary and ensure windows are closed to maintain warmth.']) %}
                    {% endif %}

                    {# Advice based on min temperature #}
                    {% if todayForecast.temperature_min <= -15 %}
                        {% set advice = advice|merge(['Extremely low temperatures! Set radiators to maximum to ensure the classroom stays warm. Minimize window openings to retain heat.']) %}
                    {% endif %}

                    {# Advice based on precipitation #}
                    {% if todayForecast.precipitation >= 100 %}
                        {% set advice = advice|merge(['Heavy rainfall expected. Ensure windows are tightly closed to prevent humidity ingress. Use doors to ventilate if necessary.']) %}
                    {% elseif todayForecast.precipitation >= 50 %}
                        {% set advice = advice|merge(['Moderate rainfall expected. Keep windows closed and use doors to ventilate the classroom as needed while avoiding excess humidity.']) %}
                    {% elseif todayForecast.precipitation > 0 %}
                        {% set advice = advice|merge(['Light rain expected. Ventilate the classroom by opening windows or doors briefly to refresh the air without allowing excessive humidity.']) %}
                    {% endif %}

                    {# Advice based on pictocode #}
                    {% if todayForecast.pictocode in [6,7,8,9,10,11,12,13,14,15,16,17] %}
                        {% set advice = advice|merge(['Wet conditions anticipated. Ensure proper ventilation to avoid humidity buildup by using doors if opening windows is not ideal.']) %}
                    {% elseif todayForecast.pictocode in [1,2,3,4,5] %}
                        {% set advice = advice|merge(['Clear or partly cloudy weather. Take the opportunity to ventilate the classroom by opening windows (or doors if it\'s too cold outside) during cooler parts of the day.']) %}
                    {% endif %}

                    {# Additional advice for ventilation in a classroom context #}
                    {% if todayForecast.temperature_max >= 20 and todayForecast.temperature_min >= 10 and todayForecast.pictocode in [1,2,3,4,5] %}
                        {% set advice = advice|merge(['Good conditions for ventilation. Open windows or doors during breaks to refresh the air without disrupting the classroom environment.']) %}
                    {% endif %}

                    {# Prioritize advice to avoid contradictions #}
                    {# Extreme conditions advice takes precedence and may exclude less critical advice #}
                    {% if todayForecast.temperature_max >= 35 %}
                        {% set advice = advice|merge(['Priority: Extreme heat conditions.']) %}
                    {% elseif todayForecast.temperature_max <= 0 %}
                        {% set advice = advice|merge(['Priority: Extreme cold conditions.']) %}
                    {% endif %}

                    {# Display the advice #}
                    {% if advice is not empty %}
                        <div class="alert alert-secondary mt-4 p-3">
                            <h6 class="mb-3"><strong>Actionable Advice :</strong></h6>
                            <ul class="list-unstyled mb-0">
                                {% for tip in advice %}
                                    <li class="mb-2" style="display: flex; align-items: flex-start;">
                                        <i class="bi bi-exclamation-circle-fill text-primary me-2"></i>
                                        <span>{{ tip }}</span>
                                    </li>
                                {% endfor %}
                            </ul>
                        </div>
                    {% else %}
                        <div class="mt-3 text-success">
                            No specific advice for today.
                        </div>
                    {% endif %}
                </div>
            </div>
        {% else %}
            <div class="card w-75 mx-auto mt-4 shadow-lg">
                <div class="card-body">
                    <p class="text-muted">Weather forecasts are currently unavailable.</p>
                </div>
            </div>
        {% endif %}


        <!-- Description Card -->
        <div class="card w-75 mx-auto mt-4 shadow-lg">
            <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                <button class="btn btn-link text-white text-decoration-none w-100 d-flex justify-content-between align-items-center"
                        data-bs-toggle="collapse" data-bs-target="#generalInfo" aria-expanded="false">
                    <h5 class="mb-0">General Information</h5>
                    <i class="bi bi-chevron-down fs-3"></i>
                </button>
            </div>
            <div id="generalInfo" class="collapse">
                <div class="card-body">
                    <div class="row">
                        <!-- Colonne de gauche pour les informations g√©n√©rales -->
                        <div class="col-md-8">
                            <div class="row g-3">
                                <!-- Nombre de Fen√™tres -->
                                <div class="col-md-6 d-flex align-items-center">
                                    <i class="bi bi-microsoft fs-2 text-secondary me-3"></i>
                                    <div>
                                        <h6 class="mb-0">Number of Windows</h6>
                                        <span class="badge bg-secondary rounded-pill">{{ room.nbWindows }}</span>
                                    </div>
                                </div>
                                <!-- Nombre de Chauffages -->
                                <div class="col-md-6 d-flex align-items-center">
                                    <i class="bi bi-thermometer-half fs-2 text-secondary me-3"></i>
                                    <div>
                                        <h6 class="mb-0">Number of Heaters</h6>
                                        <span class="badge bg-secondary rounded-pill">{{ room.nbHeaters }}</span>
                                    </div>
                                </div>
                                <!-- Surface -->
                                <div class="col-md-6 d-flex align-items-center">
                                    <i class="bi bi-aspect-ratio fs-2 text-secondary me-3"></i>
                                    <div>
                                        <h6 class="mb-0">Surface</h6>
                                        <span class="badge bg-secondary rounded-pill">{{ room.surface }} m¬≤</span>
                                    </div>
                                </div>
                                <!-- Direction Cardinale -->
                                <div class="col-md-6 d-flex align-items-center">
                                    <i class="bi bi-compass fs-2 text-secondary me-3"></i>
                                    <div>
                                        <h6 class="mb-0">Cardinal Direction</h6>
                                        <span class="badge bg-secondary rounded-pill">
                                            {{ room.cardinalDirection ? room.cardinalDirection.value | capitalize : 'Non sp√©cifi√©e' }}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Colonne de droite pour les informations de monitoring -->
                        <div class="col-md-4">
                            {% if room.acquisitionSystem %}
                                <div class="alert alert-info mb-0">
                                    <h6 class="alert-heading"><i class="fas fa-info-circle"></i> Room Monitoring</h6>
                                    <p class="mb-1"><strong>Heating:</strong> Nov-Apr</p>
                                    <p class="mb-1"><strong>Non-Heating:</strong> May-Oct</p>
                                    <hr>
                                    <p class="mb-1"><strong>Optimal temp:</strong></p>
                                    <ul class="mb-0 ps-3">
                                        <li>Heating: 19-21¬∞C</li>
                                        <li>Non-Heating: 24-28¬∞C</li>
                                    </ul>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
        </div>

        {% if is_granted('ROLE_MANAGER') %}
            <div class="card w-75 mx-auto mt-4 text-center">
                <div class="card-body">
                    {% if not room.acquisitionSystem %}
                        <h6 class="card-title">No assigned acquisition system.</h6>
                    {% else %}
                        <h6 class="card-title">An acquisition system is assigned to this room.</h6>
                    {% endif %}
                    <a href="{{ path('app_rooms_update', { name: room.name }) }}" class="btn btn-outline-primary me-2">Update</a>
                </div>
            </div>
        {% endif %}

        <!-- Back to List Button -->
        <div class="card w-75 mx-auto mt-4 text-center">
            <div class="card-body">
                <a href="{{ path('app_rooms') }}" class="btn btn-outline-secondary">Back to Room List</a>
            </div>
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Handle dynamic icon toggle for collapsible elements
            var collapsibleButtons = document.querySelectorAll('[data-bs-toggle="collapse"]');

            collapsibleButtons.forEach(function (button) {
                var targetId = button.getAttribute('data-bs-target');
                var collapsibleElement = document.querySelector(targetId);

                if (collapsibleElement) {
                    collapsibleElement.addEventListener('show.bs.collapse', function () {
                        var icon = button.querySelector('i');
                        if (icon) {
                            icon.classList.remove('bi-chevron-right');
                            icon.classList.add('bi-chevron-down');
                        }
                    });

                    collapsibleElement.addEventListener('hide.bs.collapse', function () {
                        var icon = button.querySelector('i');
                        if (icon) {
                            icon.classList.remove('bi-chevron-down');
                            icon.classList.add('bi-chevron-right');
                        }
                    });
                }
            });
        });
    </script>
{% endblock %}
