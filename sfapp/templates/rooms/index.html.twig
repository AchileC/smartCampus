{% extends 'base.html.twig' %}
{# rooms/index.html.twig #}
{% block title %}Rooms List{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .container.mt-4 {
            max-width: 1200px;
        }

        #lastUpdateTime {
            font-weight: 600;
        }

        #filterForm {
            padding: 20px;

            border-radius: 8px;
            box-shadow: var(--bs-shadow-sm);
            border: 1px solid var(--bs-border-color); /* Ensure border visibility */
        }

        /* Utilize Bootstrap's border colors */
        #filterForm .form-control,
        #filterForm .form-select {
            border: 1px solid var(--bs-border-color);
        }

        #filterForm .form-control:focus,
        #filterForm .form-select:focus {
            border-color: var(--bs-primary);
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25); /* Bootstrap's primary color with opacity */
        }

        /* Ensure modal adapts to themes */
        .modal-content {
            background-color: var(--bs-body-bg);
            color: var(--bs-body-color);
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4">

        <!-- Title and Update Indicator -->
        <div class="d-flex flex-wrap justify-content-between align-items-center mb-4">
            <h1 class="h2">{{ 'rooms_list.list' | trans }}</h1>
            <div class="d-flex align-items-center">
{#                <small class="text-muted me-3">#}
{#                    <p class="text-muted mt-2">Last updated: {{ "now"|date("d/m/Y - H:i:s", "Europe/Paris") }}</p>#}
{#                </small>#}
                {% if is_granted('ROLE_MANAGER') %}
                    <a href="{{ path('app_rooms_add') }}" class="btn btn-success">
                        <i class="bi bi-plus-lg"></i> {{ '_add_room' | trans }}
                    </a>
                {% endif %}
            </div>
        </div>

        <!-- Flash Messages -->
        <div id="flash-messages-container" class="position-fixed top-0 start-50 translate-middle-x mt-3" style="z-index: 1050;">
            {% for type, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ type }} alert-dismissible fade show flash-message shadow-lg" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endfor %}
        </div>

        <!-- Filter Form -->
        {{ form_start(filterForm, {'attr': {'class': 'mb-4', 'id': 'filterForm'}}) }}
        <div class="row g-3 align-items-end">

            <!-- Name Search Field -->
            <div class="col-md-3">
                {{ form_row(filterForm.name, {'attr': {'class': 'form-control'}}) }}
            </div>

            <!-- Floor Filter Field -->
            <div class="col-md-3">
                {{ form_row(filterForm.floor, {'attr': {'class': 'form-select'}}) }}
            </div>

            <!-- State Filter Field -->
            <div class="col-md-3">
                {{ form_row(filterForm.state, {'attr': {'class': 'form-select'}}) }}
            </div>

            <!-- Reset Button -->
            <div class="col-md-1">
                {{ form_row(filterForm.reset, {'attr': {'class': 'btn btn-outline-secondary w-100'}}) }}
            </div>

            <!-- Filter Button -->
            <div class="col-md-2">
                {{ form_row(filterForm.filter, {'attr': {'class': 'btn btn-primary w-100'}}) }}
            </div>
        </div>
        {{ form_end(filterForm) }}

        <!-- Rooms List -->
        <div class="row row-cols-1 row-cols-md-2 g-4">
            {% if rooms|length == 0 %}
                <div class="col-12 text-center">
                    <p id="no-match-message" data-add-room-link="{{ path('app_rooms_add') }}">
                        {% if is_granted('ROLE_MANAGER') %}
                            {{ 'no_match_create_room' | trans }}
                        {% else %}
                            {{ 'no_match_adjust_filters' | trans }}
                        {% endif %}
                    </p>
                </div>
            {% else %}
                {% for room in rooms %}
                    <div class="col">
                        <div class="card h-100 shadow-sm">
                            <div class="card-body d-flex flex-column justify-content-between">
                                <div>
                                    <h5 class="card-title">{{ room.name }}</h5>
                                    <p class="card-text mb-1"><strong>{{ 'floor' | trans }}:</strong> {{ ('filter.floor.' ~ room.floor.value) | trans }}</p>
                                    <p class="card-text mb-1"><strong>{{ 'state' | trans }}:</strong>
                                        <span class="badge-custom-size
                                    {% if room.state.value == 'none' %}bg-secondary
                                    {% elseif room.state.value == 'waiting' %}bg-primary
                                    {% elseif room.state.value == 'stable' %}bg-success
                                    {% elseif room.state.value == 'at risk' %}bg-warning
                                    {% else %}bg-danger{% endif %}">
                                    {{ ('_room_state.' ~ room.state.value | upper) | trans | upper }}
                                    </span>
                                    </p>
                                    {% if is_granted('ROLE_TECHNICIAN') %}
                                        <p class="card-text"><strong>{{ 'sensor' | trans }}:</strong>
                                            <span class="badge-custom-size
                                            {% if room.sensorState.value == 'linked' %}bg-success
                                            {% elseif room.sensorState.value == 'not working' %}bg-warning
                                            {% elseif room.sensorState.value == 'not linked' %}bg-secondary
                                            {% else %}bg-danger{% endif %}">
                                            {{'_sensor_state.' ~ room.sensorState.value | trans | upper }}
                                            </span>
                                       </span>
                                        </p>
                                    {% endif %}
                                </div>

                                <div class="mt-3">
                                    <div class="d-flex justify-content-end gap-2">
                                        <a href="{{ path('app_rooms_details', { name: room.name }) }}" class="btn btn-outline-primary">
                                            <i class="bi bi-info-circle"></i> {{ 'details' | trans }}
                                        </a>
                                        {% if is_granted('ROLE_MANAGER') %}
                                            <a href="{{ path('app_rooms_update', { name: room.name }) }}" class="btn btn-outline-secondary">
                                                <i class="bi bi-pencil-square"></i> {{ 'edit' | trans }}
                                            </a>
                                            <button type="button" class="btn btn-outline-danger delete-room-button"
                                                    data-room-name="{{ room.name }}"
                                                    data-delete-url="{{ path('app_rooms_delete', {'name': room.name}) }}"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#deleteRoomModal"
                                                    aria-label="{{ '_delete_room' | trans }}">
                                                <i class="bi bi-trash"></i> {{ 'delete' | trans }}
                                            </button>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            {% endif %}
        </div>
    </div>

    <!-- Modale de Suppression -->
    <div class="modal fade" id="deleteRoomModal" tabindex="-1" aria-labelledby="deleteRoomModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteRoomModalLabel">{{ '_delete_room.modal.title'|trans }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="{{ '_delete_room.modal.close'|trans }}"></button>
                </div>
                <div class="modal-body">
                    {{ '_delete_room.modal.confirmation'|trans({
                        '%room%': '<strong><span id="roomNameToDelete"></span></strong>'
                    })|raw }}
                    <p class="text-danger mt-2">⚠️ <strong>{{ '_delete_room.modal.warning'|trans }}</strong></p>
                </div>
                <div class="modal-footer d-flex flex-column align-items-stretch">
                    <form id="deleteRoomForm" method="post" class="mb-2">
                        <input type="hidden" name="_token" value="{{ csrf_token('_delete_room') }}">
                        <button type="submit" class="btn btn-danger w-100">{{ '_delete_room.modal.delete_button'|trans }}</button>
                    </form>
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">{{ '_delete_room.modal.cancel_button'|trans }}</button>
                </div>
            </div>
        </div>
    </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            /**
             * @var {NodeList} deleteButtons
             * @brief List of all room delete buttons.
             *
             * Selects all elements with the class 'delete-room-button' which
             * are used to trigger the deletion of a specific room.
             */
            const deleteButtons = document.querySelectorAll('.delete-room-button');

            /**
             * @var {HTMLElement} roomNameSpan
             * @brief Span element displaying the name of the room to delete in the modal.
             *
             * This element is dynamically updated when the user clicks on a delete button.
             */
            const roomNameSpan = document.getElementById('roomNameToDelete');

            /**
             * @var {HTMLFormElement} deleteForm
             * @brief Deletion form in the modal.
             *
             * The 'action' attribute of this form is dynamically updated to point to the appropriate deletion URL.
             */
            const deleteForm = document.getElementById('deleteRoomForm');

            /**
             * @function initializeDeleteRoomModal
             * @brief Initializes event listeners on the delete buttons.
             *
             * For each delete button, adds a 'click' event listener that
             * updates the modal content with the room name and sets the
             * form action to the specific room deletion URL.
             */
            function initializeDeleteRoomModal() {
                deleteButtons.forEach(button => {
                    button.addEventListener('click', function () {
                        /**
                         * @var {string} roomName
                         * @brief Name of the room to delete, extracted from the 'data-room-name' attribute of the button.
                         */
                        const roomName = this.getAttribute('data-room-name');

                        /**
                         * @var {string} deleteUrl
                         * @brief Specific deletion URL for the room, extracted from the 'data-delete-url' attribute of the button.
                         */
                        const deleteUrl = this.getAttribute('data-delete-url');

                        // Update the room name in the modal
                        roomNameSpan.textContent = roomName;

                        // Update the form action with the specific URL
                        deleteForm.action = deleteUrl;
                    });
                });
            }

            // Call the initialization function on DOM load
            initializeDeleteRoomModal();

            /**
             * @var {HTMLInputElement|null} sensorStatusCheckbox - The checkbox to filter rooms based on sensor status.
             *
             * Selects the checkbox that, when toggled, filters the room listings to show only linked rooms.
             */
            const sensorStatusCheckbox = document.querySelector('.sensor-status-checkbox');

            /**
             * @brief Submits the filter form automatically when the "Only show linked rooms" checkbox is toggled.
             *
             * Adds an event listener to the checkbox to detect changes. When the checkbox state changes,
             * the associated filter form is submitted to update the room listings accordingly.
             */
            if (sensorStatusCheckbox) {
                sensorStatusCheckbox.addEventListener('change', function () {
                    document.getElementById('filterForm').submit();
                });
            }
        });

        /**
         * @brief Automatically reloads the page every 30 minutes to ensure data is up-to-date.
         *
         * Sets an interval that triggers a page reload after 1,800,000 milliseconds (30 minutes).
         * This helps in keeping the displayed data fresh without requiring manual intervention.
         */
        setInterval(() => { location.reload(); }, 1800000);
    </script>
{% endblock %}
