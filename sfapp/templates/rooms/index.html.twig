{# templates/rooms/index.html.twig #}
{% extends 'base.html.twig' %}
{% block title %}Rooms List{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .theme-switch-wrapper {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        #theme-label {
            font-weight: 500;
            transition: color 0.3s ease;
        }

        [data-bs-theme="dark"] #theme-label {
            color: #ffffff;
        }

        [data-bs-theme="light"] #theme-label {
            color: #000000;
        }

        .menu-button {
            font-size: 24px;
            border: none;
            background: none;
            cursor: pointer;
            padding: 0;
        }

        .offcanvas-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
    </style>
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h1>Rooms List</h1>

        <!-- Menu Offcanvas -->
        <div class="d-flex justify-content-start">
            <button class="menu-button" type="button" data-bs-toggle="offcanvas" data-bs-target="#menuOffcanvas" aria-controls="menuOffcanvas">
                <i class="bi bi-list"></i>
            </button>
        </div>

        <div class="offcanvas offcanvas-start" tabindex="-1" id="menuOffcanvas" aria-labelledby="menuOffcanvasLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="menuOffcanvasLabel">Menu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <ul class="list-group">
                    <!-- Bouton d'activation des options -->
                    <li class="list-group-item">
                        <button id="toggleOptionsButton" class="btn btn-primary w-100">Activate Options</button>
                    </li>
                    <li class="list-group-item"><a href="{{ path('app_rooms') }}">View All Rooms</a></li>
                </ul>
            </div>
        </div>

        <!-- Bouton de Basculement Mode Sombre -->
        <div class="d-flex justify-content-end mb-3 theme-switch-wrapper">
            <span id="theme-label">Mode Sombre</span>
            <i class="bi bi-moon-fill theme-icon moon"></i>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="theme-toggle-switch">
                <label class="form-check-label" for="theme-toggle-switch"></label>
            </div>
        </div>

        <!-- Bouton "Add Room" -->
        <div id="addRoomButtonContainer" class="mb-4 hidden-options">
            <a href="{{ path('app_rooms_add') }}" class="btn btn-success btn-lg">Add Room</a>
        </div>

        <!-- Formulaire de filtres -->
        {{ form_start(filterForm, {'attr': {'class': 'mb-4', 'id': 'filterForm'}}) }}
        <div class="row align-items-center">
            <!-- Checkbox Sensor Status -->
            <div class="mb-3">
                <div class="form-check">
                    {{ form_widget(filterForm.sensorStatus, {
                        'attr': {
                            'class': 'form-check-input sensor-status-checkbox',
                            'id': 'filter_room_sensorStatus'
                        }
                    }) }}
                    {{ form_label(filterForm.sensorStatus, null, {
                        'label_attr': {
                            'class': 'form-check-label',
                            'for': 'filter_room_sensorStatus'
                        }
                    }) }}
                </div>
            </div>

            <!-- Champ de Recherche par Nom -->
            <div class="col-md-3 mb-4">
                {{ form_row(filterForm.name, {'attr': {'class': 'form-control'}}) }}
            </div>

            <!-- Champ de Filtrage par Étage -->
            <div class="col-md-3 mb-4">
                {{ form_row(filterForm.floor, {'attr': {'class': 'form-select'}}) }}
            </div>

            <!-- Champ de Filtrage par État -->
            <div class="col-md-3 mb-4">
                {{ form_row(filterForm.state, {'attr': {'class': 'form-select'}}) }}
            </div>

            <!-- Bouton Reset -->
            <div class="col-md-1">
                {{ form_row(filterForm.reset, {'attr': {'class': 'btn btn-secondary'}}) }}
            </div>

            <!-- Bouton Search -->
            <div class="col-md-2 d-flex justify-content-end">
                {{ form_row(filterForm.filter, {'attr': {'class': 'btn btn-primary'}}) }}
            </div>
        </div>
        {{ form_end(filterForm) }}

        <!-- Liste des salles -->
        <div class="row">
            {% if rooms|length == 0 %}
                <div class="col-12">
                    <p class="text-center">
                        No match. Check spelling or <a href="{{ path('app_rooms_add') }}" class="text-primary">create a new room</a>.
                    </p>
                </div>
            {% else %}
                {% for room in rooms %}
                    <div class="col-12 mb-3">
                        <div class="card">
                            <div class="card-body d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="card-title">{{ room.name }}</h5>
                                    <p class="card-text"><strong>Floor:</strong> {{ room.floor.value | capitalize }}</p>
                                    <p class="card-text"><strong>State:</strong>
                                        <span class="badge-custom-size
                                            {% if room.state.value == 'none' %}
                                                bg-secondary
                                            {% elseif room.state.value == 'waiting' %}
                                                bg-primary
                                            {% elseif room.state.value == 'stable' %}
                                                bg-success
                                            {% elseif room.state.value == 'at risk' %}
                                                bg-warning
                                            {% else %}
                                                bg-danger
                                            {% endif %}
                                        ">
                                            {{ room.state.value | upper }}
                                        </span>
                                        <span class="badge-custom-size
                                            {% if room.sensorState.value == 'linked' %}
                                                bg-success
                                            {% elseif room.sensorState.value == 'not linked' %}
                                                bg-warning
                                            {% else %}
                                                bg-danger
                                            {% endif %}
                                        ">
                                            {{ room.sensorState.value | upper }}
                                        </span>
                                    </p>
                                </div>

                                <!-- Boutons Détails, Update, Delete -->
                                <div>
                                    <div class="d-flex gap-2">
                                        <a href="{{ path('app_rooms_details', { name: room.name }) }}" class="btn btn-outline-primary">Details</a>
                                        <a href="{{ path('app_rooms_update', { name: room.name }) }}" class="btn btn-outline-secondary hidden-options">Update</a>
                                        <button type="button" class="btn btn-outline-danger hidden-options" data-bs-toggle="modal" data-bs-target="#deleteRoomModal" data-room-name="{{ room.name }}">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            {% endif %}
        </div>

        <!-- Modal de Suppression de Salle -->
        <div class="modal fade" id="deleteRoomModal" tabindex="-1" aria-labelledby="deleteRoomModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteRoomModalLabel">Deletion confirmation</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete the room <span id="roomNameToDelete"></span> ?
                        <p class="body_alert">⚠️ <strong>If there is an assigned acquisition system, it will be unassigned automatically.</strong></p>
                    </div>
                    <div class="modal-footer">
                        <form id="deleteRoomForm" method="post">
                            <input type="hidden" name="_token" value="{{ csrf_token('delete_room') }}">
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}


{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            // Gestion des flash messages
            const flashMessages = document.querySelectorAll('.flash-message');
            flashMessages.forEach((message) => {
                setTimeout(() => {
                    message.classList.remove('show'); // Bootstrap hide animation
                    message.classList.add('fade'); // Adding fade effect
                    setTimeout(() => message.remove(), 150); // Remove from DOM after fade
                }, 3000);
            });

            // Gestion du modal de suppression
            const deleteRoomModal = document.getElementById('deleteRoomModal');
            const roomNameToDelete = document.getElementById('roomNameToDelete');
            const deleteRoomForm = document.getElementById('deleteRoomForm');

            deleteRoomModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const roomName = button.getAttribute('data-room-name');

                roomNameToDelete.textContent = roomName;
                deleteRoomForm.action = '{{ path('app_rooms_delete', { name: 'ROOM_NAME_PLACEHOLDER' }) }}'.replace('ROOM_NAME_PLACEHOLDER', encodeURIComponent(roomName));
            });

            // Gestion du bouton "Only show linked rooms"
            const sensorStatusCheckbox = document.getElementById('filter_room_sensorStatus');
            if (sensorStatusCheckbox) {
                sensorStatusCheckbox.addEventListener('change', function () {
                    const filterForm = document.getElementById('filterForm');
                    if (filterForm) {
                        filterForm.submit();
                    } else {
                        console.error('Filter form not found.');
                    }
                });
            } else {
                console.error('"Only show linked rooms" checkbox not found.');
            }

            // Gestion de l'état des options "Add Room", "Update", "Delete"
            const toggleOptionsButton = document.getElementById('toggleOptionsButton');
            const hiddenOptions = document.querySelectorAll('.hidden-options');
            const optionsState = localStorage.getItem('optionsEnabled') === 'true';

            function updateOptionsState(enabled) {
                hiddenOptions.forEach(el => el.style.display = enabled ? '' : 'none');
                toggleOptionsButton.textContent = enabled ? 'Deactivate Options' : 'Activate Options';
                localStorage.setItem('optionsEnabled', enabled);
            }

            updateOptionsState(optionsState);

            toggleOptionsButton.addEventListener('click', () => {
                const currentState = localStorage.getItem('optionsEnabled') === 'true';
                updateOptionsState(!currentState);
            });

            // Gestion du mode sombre / clair
            const toggleSwitch = document.getElementById('theme-toggle-switch');
            const themeLabel = document.getElementById('theme-label');
            const savedTheme = localStorage.getItem('theme');
            const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            const defaultTheme = savedTheme || (prefersDark ? 'dark' : 'light');

            document.documentElement.setAttribute('data-bs-theme', defaultTheme);

            if (defaultTheme === 'dark') {
                toggleSwitch.checked = true;
                themeLabel.textContent = 'Mode Sombre';
            } else {
                toggleSwitch.checked = false;
                themeLabel.textContent = 'Mode Sombre';
            }

            toggleSwitch.addEventListener('change', function () {
                if (this.checked) {
                    document.documentElement.setAttribute('data-bs-theme', 'dark');
                    localStorage.setItem('theme', 'dark');
                } else {
                    document.documentElement.setAttribute('data-bs-theme', 'light');
                    localStorage.setItem('theme', 'light');
                }
            });
        });
    </script>
{% endblock %}






