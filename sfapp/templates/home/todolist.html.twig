{% extends 'base.html.twig' %}
{# home/todolist.html.twig #}
{% block title %}To-Do-List{% endblock %}

{% block body %}
    <div class="container mt-5">
        <h1 class="text-center">To-Do-List of Technician</h1>

        <h2 class="text-center">{{ awaitingTasksCount }} awaiting tasks</h2>

        <!-- Bouton Ajouter une Action -->
        <div class="text-start mb-3">
            <a href="{{ path('app_todolist_done') }}" class="btn btn-outline-success btn-sm">
                View Completed Tasks
            </a>
        </div>

        <!-- Flash messages block -->
        <div id="flash-messages-container" class="position-fixed top-0 start-50 translate-middle-x mt-3" style="z-index: 1050;">
            {% for type, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ type }} alert-dismissible fade show flash-message shadow-lg" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endfor %}
        </div>

        <!-- Conteneur des Actions -->
        <div class="card">
            <div class="card-body">
                {% if actions is not empty %}
                {% for action in actions %}
                    <div class="d-flex align-items-center justify-content-between border rounded p-3 mb-2">
                        <div>
                            <p class="mb-1"><strong>{{ action.info.value | capitalize }} {{ action.room.name }}</strong></p>
                            <p class="mb-0 text-muted">
                                {% if action.state.value == 'to do' %}
                                    created {{ action.createdAt|date('l d F, H:i') }}
                                {% elseif action.state.value == 'doing' %}
                                    started {{ action.createdAt|date('l d F, H:i') }}
                                {% endif %}
                            </p>
                        </div>
                        <div class="d-flex align-items-center">
                            <!-- Badge État -->
                            <span class="badge {% if action.state.value == 'to do' %}bg-warning text-dark{% elseif action.state.value == 'doing' %}bg-primary text-dark{% else %}bg-success{% endif %} me-2">
                                {{ action.state.value | upper }}
                            </span>

                            <!-- Boutons d'Action -->
                            <a href="{{ path('app_todolist_edit', {id: action.id}) }}" class="btn btn-outline-warning btn-sm me-2">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button
                                    class="btn btn-outline-danger btn-sm"
                                    data-bs-toggle="modal"
                                    data-bs-target="#deleteActionModal"
                                    data-action-id="{{ action.id }}"
                                    data-delete-url="{{ path('app_todolist_delete', { id: action.id }) }}"
                                    data-csrf-token="{{ csrf_token('delete_action_' ~ action.id) }}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                {% endfor %}
                {% else %}
                    <div class="text-center text-muted py-4">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        <strong>No pending tasks.</strong>
                    </div>
                {% endif %}
            </div>
        </div>

        <!-- Dernière Mise à Jour -->
        <p class="text-end text-muted mt-3">Last updated : {{ "now"|date("d/m/Y - H:i") }}</p>
    </div>

    <!-- Modale de Suppression -->
    <div class="modal fade" id="deleteActionModal" tabindex="-1" aria-labelledby="deleteActionModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="w-100 text-center">
                        <h5 class="modal-title" id="deleteActionModalLabel">Cancel Action</h5>
                    </div>
                    <button type="button" class="btn-close position-absolute end-0 me-3" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body text-center">
                    Are you sure you want to delete the action associated with the technician?<br>This is definitive.
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <form id="deleteActionForm" method="post" action="">
                        <input type="hidden" name="_token" value="">
                        <button type="button" class="btn btn-success mx-2" data-bs-dismiss="modal">I changed my mind</button>
                        <button type="submit" class="btn btn-danger mx-2">Confirm Cancelling</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            /**
             * @var {NodeListOf<HTMLElement>} flashMessages - All elements with the class 'flash-message'.
             *
             * Selects all elements that display flash messages to the user.
             */
            const flashMessages = document.querySelectorAll('.flash-message');

            /**
             * @brief Fades out and removes flash messages after 3 seconds.
             *
             * Iterates through each flash message, adds a 'fade' class to initiate a fade-out effect,
             * and removes the element from the DOM shortly after the fade-out animation completes.
             */
            flashMessages.forEach((message) => {
                setTimeout(() => {
                    message.classList.add('fade');
                    setTimeout(() => message.remove(), 150);
                }, 3000);
            });

            /**
             * @file deleteActionHandler.js
             * @brief Manages the Delete Action modal functionality.
             *
             * This script handles the setup of the Delete Action modal by updating the form's action URL
             * and CSRF token based on the action selected by the user. It ensures that the correct action
             * is targeted when the form is submitted.
             */

            /**
             * @var {HTMLElement|null} deleteActionModal - The modal element for deleting an action.
             *
             * Selects the modal element responsible for handling action deletions.
             */
            const deleteActionModal = document.getElementById('deleteActionModal');

            /**
             * @var {HTMLFormElement|null} deleteForm - The form inside the Delete Action modal.
             *
             * Selects the form element within the Delete Action modal used to submit the deletion request.
             */
            const deleteForm = document.getElementById('deleteActionForm');

            /**
             * @var {HTMLInputElement|null} csrfTokenInput - The hidden CSRF token input within the delete form.
             *
             * Selects the input element that holds the CSRF token required for form submission security.
             */
            const csrfTokenInput = deleteForm.querySelector('input[name="_token"]');

            /**
             * @event show.bs.modal
             * @memberof deleteActionModal
             * @brief Event listener for when the Delete Action modal is about to be shown.
             *
             * This event is triggered just before the modal is displayed. The listener updates the form's
             * action URL and CSRF token based on the action selected by the user, ensuring that the deletion
             * request targets the correct action.
             *
             * @param {Event} event - The event object containing details about the modal trigger.
             */
            deleteActionModal.addEventListener('show.bs.modal', function (event) {
                /**
                 * @var {HTMLElement} button - The button element that triggered the modal.
                 *
                 * Retrieves the button that was clicked to open the modal, which contains data attributes
                 * necessary for setting up the deletion form.
                 */
                const button = event.relatedTarget; // Button that triggered the modal

                /**
                 * @var {string|null} actionId - The ID of the action to be deleted.
                 *
                 * Extracts the action ID from the button's data attributes to identify which action is targeted
                 * for deletion.
                 */
                const actionId = button.getAttribute('data-action-id');

                /**
                 * @var {string|null} deleteUrl - The URL endpoint for deleting the specified action.
                 *
                 * Retrieves the deletion URL from the button's data attributes, which is used to set the form's
                 * action attribute dynamically.
                 */
                const deleteUrl = button.getAttribute('data-delete-url');

                /**
                 * @var {string|null} csrfToken - The CSRF token for securing the deletion request.
                 *
                 * Obtains the CSRF token from the button's data attributes to include it in the form submission,
                 * ensuring protection against cross-site request forgery attacks.
                 */
                const csrfToken = button.getAttribute('data-csrf-token');

                /**
                 * @brief Updates the form's action URL to point to the correct deletion endpoint.
                 *
                 * Sets the `action` attribute of the delete form to the URL specified in the button's data attributes.
                 */
                deleteForm.action = deleteUrl;

                /**
                 * @brief Sets the CSRF token value in the hidden input field of the form.
                 *
                 * Assigns the retrieved CSRF token to the hidden input field to include it in the form data upon submission.
                 */
                csrfTokenInput.value = csrfToken;
            });

        });
    </script>
{% endblock %}
