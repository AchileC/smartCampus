{# base.html.twig #}
<!DOCTYPE html>
<html lang="fr" data-bs-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <!-- Bootstrap JS (avec Popper) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    {% block stylesheets %}
        <link rel="stylesheet" href="{{ asset('css/baseStyle.css') }}">
    {% endblock %}
</head>

{# Récupérer la route actuelle #}
{% set current_route = app.request.attributes.get('_route') %}

{% if current_route == 'app_rooms' %}
    <header class="bg-dark text-white p-2">
        <div class="container-fluid d-flex align-items-center">

            <!-- Nom de la route (ou titre) au centre -->
            <h1 class="h1 flex-grow-1 text-center mb-0">
                Rooms
            </h1>
        </div>
    </header>
{% endif %}

<!-- Sidebar -->
<div id="sidebar" class="{% if current_route == 'app_home' %}open{% endif %}">
    <div class="brand d-flex justify-content-center align-items-center">
        {% if is_granted('ROLE_TECHNICIAN') or is_granted('ROLE_MANAGER') %}
            <a href="{{ path('app_home') }}" class="d-flex align-items-center text-decoration-none text-white">
                <img src="{{ asset('media/logo.png') }}" alt="Logo" style="height: 75px; width: auto; border-radius: 0;">
            </a>
        {% else %}
            <img src="{{ asset('media/logo.png') }}" alt="Logo" style="height: 75px; width: auto; border-radius: 0;">
        {% endif %}
    </div>
    <hr>
    <nav class="nav flex-column">
        <a href="{{ path('app_rooms') }}"
           class="nav-link {{ current_route starts with 'app_rooms' ? 'active' : '' }}">
            <i class="bi bi-box"></i>
            {{ 'rooms'|trans }}
        </a>
        {% if is_granted('ROLE_TECHNICIAN') or is_granted('ROLE_MANAGER') %}
            <a href="{{ path('app_home') }}"
               class="nav-link {{ current_route starts with 'app_home' ? 'active' : '' }}">
                <i class="bi bi-house-door"></i>
                {{ 'dashboard'|trans }}
            </a>
        {% endif %}
        {% if is_granted('ROLE_TECHNICIAN') %}
            <a href="{{ path('app_todolist') }}"
               class="nav-link {{ current_route starts with 'app_todolist' ? 'active' : '' }}">
                <i class="bi bi-speedometer2"></i>
                {{ 'my_to_do_list'|trans }}
            </a>
            <a href="{{ path('app_acquisition_system') }}"
               class="nav-link {{ current_route starts with 'app_acquisition_system' ? 'active' : '' }}">
                <i class="bi bi-grid"></i>
                {{ 'as_list'|trans }}
            </a>
        {% endif %}
    </nav>

    <!-- User section -->
    <div class="user-section d-flex align-items-center">
        <div class="d-flex align-items-center">
            {% if app.user %}
                <div class="dropdown">
                    <button class="btn d-flex align-items-center dropdown-toggle" type="button"
                            id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-person-circle me-2" style="font-size: 1.5rem;"></i>
                        <span>{{ app.user.username }}</span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                        <li>
                            <!-- Bouton Logout -->
                            <form method="post" action="{{ path('app_logout', { '_locale': app.request.locale }) }}" class="m-0 p-0">
                                <input type="hidden" name="_csrf_token" value="{{ csrf_token('logout') }}">
                                <button type="submit" class="dropdown-item text-danger d-flex align-items-center logout-item">
                                    <i class="bi bi-box-arrow-right me-2"></i>
                                    {{ 'logout'|trans }}
                                </button>
                            </form>
                        </li>
                    </ul>
                </div>
            {% else %}
                <a class="btn d-flex align-items-center" href="{{ path('app_login') }}"
                   role="button" aria-expanded="false" style="color: #adb5bd;">
                    <i class="bi bi-person-circle me-2" style="font-size: 1.5rem;"></i>
                    <span>{{ 'login'|trans }}</span>
                </a>
            {% endif %}

            <button class="btn btn-sm settings-button" data-bs-toggle="modal" data-bs-target="#settingsModal" aria-label="Paramètres">
                <i class="bi bi-gear-fill" style="font-size: 1.25rem;"></i>
            </button>

            {% set unreadNotifications = notifications|filter(notification => not notification.isRead) %}
            {% if is_granted('ROLE_MANAGER') %}
                <div class="dropdown position-relative">
                    <button class="btn btn-link text-white position-relative" id="notificationButton"
                            data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-bell-fill position-relative" style="font-size: 1.25em;">
                            {% if unreadNotifications|length > 0 %}
                                <span class="notification-badge">
                                        {{ unreadNotifications|length }}
                                    </span>
                            {% endif %}
                        </i>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="notificationButton">
                        <li class="fw-bold text-center mb-2 sticky-header d-flex justify-content-between align-items-center px-3">
                            <span>Notifications</span>
                            <button class="btn btn-sm btn-link text-white p-0" id="markAllAsReadButton" title="Mark all as read">
                                <i class="bi bi-check2" style="font-size: 1.25rem;"></i>
                            </button>
                        </li>
                        {% for notification in notifications|reverse %}
                            <li>
                                <a href="{{ path('mark_notification_as_read', { id: notification.id }) }}"
                                   class="list-group-item list-group-item-action {% if notification.isRead %}fw-muted{% else %}fw-bold{% endif %}">
                                    <small class="fw-muted">{{ notification.createAt|date('d/m/Y H:i', 'Europe/Paris') }}</small><br>
                                    {{ notification.message }}
                                </a>
                            </li>
                        {% else %}
                            <li class="text-center text-muted">No new notifications</li>
                        {% endfor %}
                    </ul>
                </div>
            {% endif %}
        </div>
    </div>
</div>

<!-- Contenu principal -->
<div id="main-content">

    <button id="toggleSidebarButton" onclick="toggleSidebar()">
        <i id="sidebarToggleIcon" class="bi bi-list"></i> <!-- Icône hamburger -->
    </button>


    {% block body %}
    {% endblock %}
</div>

<!-- Modal Settings -->
<div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="settingsModalLabel">Parameters</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex align-items-center">
                    <span id="theme-label-modal" class="form-label me-3 mb-0">Mode Sombre</span>
                    <i class="bi bi-moon-fill theme-icon moon me-3"></i>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="theme-toggle-switch-modal">
                        <label class="form-check-label" for="theme-toggle-switch-modal"></label>
                    </div>
                </div>
                <br>
                <div class="d-flex align-items-center">
                    <label for="language-select" class="form-label me-3 mb-0">Langue</label>
                    <select class="form-select form-select-sm" id="language-select" aria-label="Sélecteur de langue" style="width: 120px;">
                        <option value="en" selected>English</option>
                        <option value="fr">Français</option>
                        <!-- Ajoutez d'autres langues ici -->
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

    {% block javascripts %}
    <script>
        /**
         * @file base.html.twig
         * @brief Main Twig template for the Smart Campus application.
         *
         * This script handles the interactivity of the sidebar, theme toggling, and options activation.
         */

        document.addEventListener("DOMContentLoaded", function () {
            /**
             * @var {HTMLElement} sidebar - The sidebar element.
             * @var {HTMLElement} toggleButton - The main content area.
             * @var {HTMLElement} toggleIcon - The icon used to toggle the sidebar.
             */
            const sidebar = document.getElementById('sidebar');
            const toggleButton = document.getElementById('toggleSidebarButton');
            const toggleIcon = document.getElementById('sidebarToggleIcon');
            const mainContent = document.getElementById('main-content');
            // Récupération de la route actuelle (déjà définie en haut de votre template, on la repasse en JS)
            const currentRoute = "{{ current_route }}";

            // Si on est sur app_home, on force la sidebar à être ouverte et on masque le bouton
            if (currentRoute === "app_home") {
                if (window.innerWidth >= 768) {
                    sidebar.classList.add("open");
                    mainContent.classList.add("with-sidebar");
                    toggleButton.classList.add("with-sidebar");
                    toggleButton.style.display = "none";
                } else {
                    // Sur mobile (< 768px), on ne modifie rien => la sidebar reste fermée
                    // Optionnel : s’assurer que le bouton hamburger soit toujours visible sur mobile
                    toggleButton.style.display = "block";
                }
            }

            /**
             * @function toggleSidebar
             * @brief Toggles the visibility of the sidebar and updates the toggle icon.
             *
             * This function adds or removes the 'closed' class on the sidebar and 'with-sidebar' on the main content.
             * It also switches the toggle icon between the hamburger and close icons.
             */
            // Fonction pour basculer la sidebar et ajuster le bouton
            window.toggleSidebar = function () {
                const isMobile = window.innerWidth <= 768; // Vérifie si on est sur mobile
                const isOpen = sidebar.classList.toggle('open');

                if (isMobile) {
                    // Sur mobile : ne modifiez pas le contenu principal
                    toggleButton.classList.toggle('with-sidebar', isOpen);
                } else {
                    // Sur desktop : déplacez le contenu principal
                    mainContent.classList.toggle('with-sidebar', isOpen);
                    toggleButton.classList.toggle('with-sidebar', isOpen);
                }

                // Basculer l'icône
                toggleIcon.classList.toggle('bi-list', !isOpen);
                toggleIcon.classList.toggle('bi-arrow-bar-left', isOpen);
            };
            /**
             * @var {NodeListOf<HTMLElement>} flashMessages - All elements with the class 'flash-message'.
             *
             * Selects all elements that display flash messages to the user.
             */
            const flashMessages = document.querySelectorAll('.flash-message');

            /**
             * @brief Fades out and removes flash messages after 3 seconds.
             *
             * Iterates through each flash message, adds a 'fade' class to initiate a fade-out effect,
             * and removes the element from the DOM shortly after the fade-out animation completes.
             */
            flashMessages.forEach((message) => {
                setTimeout(() => {
                    message.classList.add('fade');
                    setTimeout(() => message.remove(), 150);
                }, 3000);
            });

            /**
             * @var {HTMLInputElement} themeToggleSwitch - The theme toggle switch element.
             * @var {HTMLElement} themeLabel - The label displaying the current theme.
             */
            const themeToggleSwitchModal = document.getElementById("theme-toggle-switch-modal");
            const themeLabelModal = document.getElementById("theme-label-modal");

            // Set the initial theme based on localStorage or system preferences
            const savedTheme = localStorage.getItem("theme");
            const prefersDark = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
            const currentTheme = savedTheme ? savedTheme : (prefersDark ? "dark" : "light");

            // Apply the current theme
            document.documentElement.setAttribute("data-bs-theme", currentTheme);
            if (themeToggleSwitchModal) {
                themeToggleSwitchModal.checked = currentTheme === "dark";
                themeLabelModal.innerText = "Mode Sombre";
            }

            /**
             * Event listener for theme toggle switch in modal
             */
            if (themeToggleSwitchModal) {
                themeToggleSwitchModal.addEventListener("change", function () {
                    const newTheme = themeToggleSwitchModal.checked ? "dark" : "light";
                    document.documentElement.setAttribute("data-bs-theme", newTheme);
                    localStorage.setItem("theme", newTheme);
                    themeLabelModal.innerText ="Mode Sombre";
                });
            }

            /**
             * Handle Language Selection in Modal
             */
                // Sélecteur de langue
            const languageSelect = document.getElementById("language-select");

            if (languageSelect) {
                // 1) On regarde dans l'URL
                const pathParts = window.location.pathname.split('/').filter(Boolean);
                let urlLocale = null;

                // pathParts[0] sera 'en' ou 'fr' si l'URL est du type /en/... ou /fr/...
                if (pathParts[0] === 'en' || pathParts[0] === 'fr') {
                    urlLocale = pathParts[0];
                }

                // 2) On regarde dans le localStorage
                const savedLanguage = localStorage.getItem("language");

                // 3) On décide de la locale "effective"
                //    Priorité : locale dans l'URL => ensuite localStorage => fallback 'en'
                let effectiveLocale = urlLocale || savedLanguage || 'en';

                // 4) On affecte la locale "effective" au sélecteur de langue
                languageSelect.value = effectiveLocale;

                // 5) On écoute le changement de la value du sélecteur
                languageSelect.addEventListener("change", function () {
                    const selectedLanguage = languageSelect.value;
                    // On mémorise la nouvelle valeur dans le localStorage
                    localStorage.setItem("language", selectedLanguage);

                    // On met à jour l’URL en conservant les segments restants
                    const currentPathParts = window.location.pathname.split('/').filter(Boolean);

                    // Si le premier segment est déjà 'en' ou 'fr', on le remplace
                    if (currentPathParts[0] === 'en' || currentPathParts[0] === 'fr') {
                        currentPathParts[0] = selectedLanguage;
                    } else {
                        // Sinon, on l'insère
                        currentPathParts.unshift(selectedLanguage);
                    }

                    // Redirection vers la nouvelle URL
                    const newPath = `/${currentPathParts.join('/')}`;
                    window.location.href = newPath;
                });
            }


            /**
             * Fonction pour gérer les animations et styles en cas d'erreurs de validation.
             */
            function handleFormValidationErrors() {
                // Sélectionne tous les champs de formulaire invalides
                const invalidInputs = document.querySelectorAll('.form-control.is-invalid');

                // Sélectionne le bouton de soumission
                const saveButton = document.querySelector('button[type="submit"]');

                if (invalidInputs.length > 0) {
                    invalidInputs.forEach((input) => {
                        // Ajoute l'effet de tremblement en re-déclenchant l'animation
                        input.classList.remove('shake');
                        void input.offsetWidth; // Hack pour redéclencher l'animation
                        input.classList.add('shake');
                    });

                    if (saveButton) {
                        // Change la couleur du bouton "Save Room" en rouge
                        saveButton.classList.remove('btn-primary');
                        saveButton.classList.add('btn-danger');
                    }
                } else {
                    if (saveButton) {
                        // Réinitialise la couleur du bouton "Save Room" si pas d'erreurs
                        saveButton.classList.remove('btn-danger');
                        saveButton.classList.add('btn-primary');
                    }
                }
            }

            const markAllAsReadButton = document.getElementById("markAllAsReadButton");
            const notificationBadge = document.querySelector(".notification-badge");

            markAllAsReadButton.addEventListener("click", function () {
                fetch("{{ path('mark_notifications_as_read') }}", {
                    method: "POST",
                    headers: {
                        "X-Requested-With": "XMLHttpRequest",
                        "X-CSRF-Token": "{{ csrf_token('mark_notifications') }}",
                        "Content-Type": "application/json",
                    },
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Cache la pastille de notification s'il y en a une
                            if (notificationBadge) {
                                notificationBadge.style.display = "none";
                            }

                            // Optionnel : rafraîchir la liste ou modifier l'apparence des notifications
                            const notificationItems = document.querySelectorAll(".list-group-item.fw-bold");
                            notificationItems.forEach(item => {
                                item.classList.remove("fw-bold");
                                item.classList.add("fw-muted");
                            });
                        }
                    })
                    .catch(error => console.error("Erreur AJAX :", error));
            });

            document.addEventListener('DOMContentLoaded', handleFormValidationErrors);
        });

        /**
         * @brief Automatically reloads the page every 30 minutes to ensure data is up-to-date.
         *
         * Sets an interval that triggers a page reload after 900,000 milliseconds (15 minutes).
         * This helps in keeping the displayed data fresh without requiring manual intervention.
         */
        setInterval(() => { location.reload(); }, 900000);
    </script>
    {% endblock %}
</html>
